Python3
Flask
PostgreSQL
psycopg2: connect to Postgres server to a Flask application 
SQLAlchemy
Flask-SQLAlchemy

Database Management System
  Software to interact with a database

Database Application Programming Interfaces (DBAPIs)
  Interact with a database from another language/webserver framework

pyscopg2
  library to interact with database from Python

relational databases
  database: collection of data
  database system: storing/retrieving data 

properties of databases
  Persistence: access later 
  Shared source of truth: accessible by many usuers
  Store many data types 
  Concurrency control (handling many db actions at once)

relational vs nonrelational databases 
  
relational database 
  All data is stored in tables
  Every list of columns with data types per column
  Data intergrity: 
    Constraints 
    Triggers

Primary Keys (Composite key for multiple columns of primary keys)
  1 or more columns that uniquely identifies the whole row
  If more than 1 column

Foreign Key
  Maps 2 primary keys: encodes relationship from one table to another 

    Ex vehicles, drivers 
    id of drivers 
    have driver_id in anaother table's columns to link drivers and v    vehicles 

SQL: Structure Query Language
  Standard langage for communicating with a relational database 

  Different "dialects" 

SQL commands 
  Manipulating data
    Insert 
    Update
    Delete

  Querying data
    Select

  Structure data
    Create table
    Alter table
    Drop table

    Add column
    Drop column

Client Server model
  Request/Response 

Server: Postgres
Client: Command line applications/Graphical User Interfaces/Web apps

Database Server -[Web Server - Web Client]

Database - Server - Client 

Client - Server - Database 

Communication protocols used to transfer data over internet 

TCP/IP: Transmission Control Protocol / Internet Protocol 

Client/Server uses a communication protocol 

Postgres follows client-server model and supports TCP/IP for communication 


IP addresses: location of computers on a network 
Ports: describes where to receive traffic at recipient computer 

port 80: HTTP requests 
5432: most database ports - Default port for Postgres

TCP/IP: 
  connection-based protocol
  Open a connection to start communications 
  Close a connection to end communications 

TCP/IP suit of protocols

connections/sessions 

session: marks the start and end of a connection

session: 
start a connection - transactions are committed to the database- end a connection

UDP: User Datagram Protocol
  Hosts on the network send data (datagrams) without  any connections established

  fast/less reliable than TCP

  ex. real time streaming or Voice over IP use UDP

  fewer delays over UDP than TCP

TCP: 
  continuous connections - more reliable, more latency

server - database: 
  establish a connection to start a session 

Transactions: atomic units of work for database to perform 

Relational databases are *transactional*: All changes to data made through units called transactions 
  
  transaction: single/multiple changes 

    changes within data within a database: 
      UPDATE/INSERT/DELETE

    within a transaction multiple changes are executed in an *ordered* sequence that we dictate to transaction 

 operation - success/fails together as a unit 

Relational databases: All work captured in transactions 

Each transaction, work is done with UPDATE/INSERT/DELETE bundled as a whole 

ex

  transaction.add('INSERT INTO...')
  transaction.add('DELETE...')
  
  queue up work in a transaction 
  then *commit* the transaction

  transaction.commit() 

"queue" up the changes (UPDATE/INSERT/DELETE) and "commit" the 

 transaction can be cleared by using a rollback

 transaction.rollback()

Why bundle work into transactions? 
  Database systems can fail 
  Database always in a valid state

Summary:
` Queue up your INSERT/DELETE/UPDATE in a transaction and commit the transaction 

  If error, can rollback the transaction 

ACID Properties 

Review: 
  1. Databases use client-server model over a network 
  2. Postgres uses TCP/IP - a connection-based protocol

  3. Start/End session 

  4. Sessions have transactions that commit work to a database 

Maintain consistency in a database before/after a transaction, ACID properties followed 

A: Atomicity: Entire transaction takes place or not at all 

C: Consistency: Database must be consistent before / after a transaction 

I: Isolation: Multiple Transactions occur independently without interference 

D: Durability: Changes of a successful transaction occurs even if system failure occurs 

***Transactions: concern changing data in databaase INSERT/DELETE/UPDATE, not querying (no SELECT etc).

Changes are queued into the transaction and then commit the transaction 

Can rollback a transaction - cleared of commands

Rollback; clear the queue of operations added to a transacton 

Postgres: open source, general purpose, object-relational database management system 

  Object-relational support: includes support for arrays, inheritance

  highly scalable

  transaction-based

  multi-version concurrency control: avoids unnecessary locking when multiple writes are happening to the database at once - avoids wait times for access to database 

    several databases available for reading from and writing to at once 

  great performance / indexing capabilities for optimizing query performance 

 Postgres Terminal Commands 

login: sudo -u postgres -i 

start a server: pg_ctl -D /usr/local/var/postgres start

create a database: createdb <name>
delete a database: dropdb <name> 

psql: interact with a Postgres database 
  interactive terminal app 

  begin a connected session with that database

    psql <dbname>

   
psql commands 
  
  list databases: \l 

  quit: \q

  create a table within a database: create table <name>

  example: 

    create table table1(
      id INTEGER PRIMARY KEY
      description VARCHAR NOT NULL,
  );  

  see tables \dt

  see table schema for table: \d table1

  connect to a diffrent database \c <db name>

relation and table same thing 

  example of using psql 

    start connection to database 'example': psql example
    insert a row: INSERT INTO table1 (id, description) VALUES(1, 'this is a thing'); 
    query a row: SELECT * from table1; 
    query a row with a filter: SELECT * from table1 WHERE id = 1;  

psql: Postgres client to interact with Postgres database 

pgAdmin: GUI Postgres client to interact with PostgresSQL 

PopSQL: GUI Postgres client 

Postgres Adapters: psycopg2 = to make client Python apps 

DBAPISs:
  Provides a standard interface for one programming language to talk to relational database server 

  low level library for writing SQL statements that connevct to a database 

  also known as database adapters 

different DBAPIs for every server framework or language + database system 

  To connect Ruby on Rails app to Postgres server, user ruby-pg 

  To connect node application to Postgres sever, use node-postgres

  To connect Django/Flask application to a Postgres server: psycopg2

psycopg2 commands

    conn = psycopg2.connect(...) : Establish a connection, starting a session, begins a transactoin 

    cursor = conn.curosr() : set a cursor to begin executing commands 

    cursor.execute(<sql command string>)
  
    cursor.commit() : commit the transaction 

    cursor.rollback() : rollback the transaction 

 Steps to get a database-backed web application up and running

  1. create a database using createdb in Postgres

  2. establish a donncection to the database
      use psycopg2.connect()

  3. define and create data schema 
      execute CREATE TABLE commands to create tables/define schema (attricutes, data types etc) that define what data gets housed for web app) 

  4. seed database with initial data 

  5. create routes and views

  6. run server 

  7. deploy server to the web 

SQLAlchemy: Python SQL Toolkit - Tool to interact with databases
  Object Relational Mapping: maps tables and columns to class objects and attributes 

 Example 1:
   in SQL
    CREATE TABLE todos (
      id INTEGER PRIMARY KEY,
      description VARCHAR NOT NULL,
      completed BOOLEAN NOT NULL DEFAULT false

    ); 

  in SQLAlchemy ORM 
    class Todo(db.Model):
      id = db.Column(db.Integer, primary_key=True)
      description = db.Column(db.String(), nullable=False)
      completed = db.Column(db.Boolean, nullable=False, default=False)

 
  Example 2: 
    SELECT * from todos

    Todo.query.all()
    
    Gets executed no mater which database system 

    Each database system may make you write SQL in a slightly different way. 

    SQLAlchemy abstracts those differences away. Don't need to write SQL statement directly 

    Can ignore database system. Can switch between SQLLite/Postgres for example 


Benefits of SQLAlchemy:

  function based query construction 

  avoid writing raw SQL

  avoid sending SQL to the database on every call. Offers automatic caching. 

SQLAlchemy's Layers of Abstraction 

  Without SQLAlchemy:

    use a DBAPI like psycopg2 

    establish connection: conn = psycopg2.connect(...
    create a cursor: cur = conn.cursor()
    execute SQL commands: cur.execute('SELECT...') and commit transactions 
    
    *not scalable as complexity grows 

  With SQLAlchemy: 

    Offers multiple layers of abstraction 

    lowest level: offers DBAPI 

    Connection Pool, Dialect

    SQLExpressions / Engines 

    ORM 

  Dialect Docs: https://docs.sqlalchemy.org/en/14/dialects/

    Allows us to forget about the database system we're using 

  Connection Pool: 

    Avoide open/close connections for every data change 

    Handles dropped connections

    Avoid many small calls when making small changes to DB 

  Engine: 
    
    Lowest level layer of abstraction to interact with database 

    Send raw SQL to database 

    Ex 

      engine = create_engine('postgres://...') 

      conn = engine.connect()
      result = conn.execute('SELECT * from vehicles;') 

   SQL Expressions 
      
      compose python objects to compose SQL expressions instead 

      todos = Table('todos', ...)

      ins = todos.insert().values(
              description='Clean my room', 
              completed=False
          )

      s = select([todos])

      conn = engine.connect()
      result = conn.execute(ins)
      result = conn.execute(s)

      result.close()

  SQLAlchemy ORM 
    highest level of abstraction

    compose SQL Expressions by building Python classes of objects which map 
    to tables in the database 

    Maps classes to tables 

    ORM: optional library to interact (write/read) with database 

    SQLAlchemy Core

    SQLAlchemy ORM
      Uses the Core library 

      ORM maps from database schema to Python objects 

      ORM persists objects into corresponding database tables 

  Mapping between Tables and Classes

      class Human:

        def __init__(self, first_name, last_name, age):
          self.first_name = first_name
          self.last_name = last_name
          self.age = age 
      
      sarah = Human('Sarah', 'Silverman', 48) 

      bob = Human('Bob', 'Sage', 54)

      ...

      CREATE TABLE humans (
        id INTEGER PRIMARY KEY, 
        first_name VARCHAR
        last_name VARCHAR
        age INTEGER 

    class is the table

    attributes are the columns 

    instantiate a class is like creating a table 

    create instances (objects) of a class is like creating rows in a table 

    column maps to attribute in class

    table schema maps to class definition 

    rows in a table map to objects that are instances of a class 

    Summary: 

      Tables map to classes 

      Table records(rows) map to class objects 

      Table columns map to class attributes 

Flask 

  simple web framework for serving web pages with data 

  https://flask.palletsprojects.com/en/2.0.x/
  
  https://docs.sqlalchemy.org/en/14/dialects/

  127.0.0.1: IP Address (internet protocol address) of local machine - unique address that identifies a device on the internet or local network. 

  localhost: hostname refering to current computer used to access it. localhost resolves to 127.0.0.1
 
 @app.route('/')
 def index(): 
    return 'Hello world'
  
 @app.route: Python decorator 
  Decorators take functions and return another function to extend the input function with additional ("decorated") functionality. 
  @app.route is a decorate that takes an input function index() as a callback that is invoked when a requet to route / comes in from client 
 
  Enable live reload: 
    export FLASK_ENV=development 
    or 
    FLASK_APP=app.py FLASK_DEBUT=true flask run 

  Another way to run flask app:
    if __name_- = '__main__':
      app.run()

    script's __name__ set to __main__ by Python interpretor which runs through executing all code found in the script. When reaches the end and finds if __name__ == 'main__' evaluates to True and calls app.run() 

db = SQLAlchemy(app) # an instance of the SQLAlchemy class from Flask-SQLAlchemy library

db: interface for interacting with database
db.Model: object that lets us create / manipulate data models (class or table) 
db.session: create/maniupulate database transactons (within that session) 

SQLAlchemy models
  
  set tables: db.create_all()

SQLAlchemy: dataytpes
  Integer
  String(size)
  Text
  DateTime
  float
  Boolean
  PickleType
  LargeBinary

  https://flask-sqlalchemy.palletsprojects.com/en/2.x/models/
  
  Ex
    name = db.Column(db.String()) : sets a data type of string with variable length

    VARCHAR: Variable Character: character data that is varying. Indeterminate length string data type.

 
SQLAlchemy constraints
  constraints: ensures data integrity
    data integrity:  
      data is stored accurately
      applying rules consistently 
  Example
    name = db.Column(db.String(), nullable=False)
    nullable=False: same as NOT NULL in SQL: column should never be null 
    unique=True: same as UNIQUE in SQL: each row should have a unique value
    unique=True, nullable=False


Recap:
  SQLAlchemy: layers of abstracton
    DBAPI: Implements a protocol for connecting to a database (ex pyscopg2)
    Connection Pool: Manages a pool of connects  that we reuse 
    Dialect: Translates generic SQL instructions to database-specific instructions for the DPAPI + specific backend (MySQL, Postgres.etc)
    engine: connects to database 
    SQL Expression: Write SQl using Python expressions
    ORM: Write and query Python objects mapped to db tables, generating SQL expressions for you.

  SQLAlchemy ORM: 
    Mapping between Classes and Tables
  
  Flask SQLAlchemy library and SQLAlchemy class 
    db.Model: ability to create and manipulate models (tables/classes)
    db.session: ability to create and manipulate transactions (bundles of SQL statements)
  
  Define a model (class Person) 

  Debugging tricks using dunder repr method __repr__ 

Python Interactive mode:
  python3
  from flask_hello_app import db, Person
  person = Person(name='Sarah')
  db.session.add(person)
  db.session.commit()

  Person.query.all()
  Person.query.filter_by(name='Amy').all()
  results = Person.query.filter_by(name='Amy').all()
  results[0]
  results[0].name 
  
  person1 = Person(name='New Person 1')
  person2 = Person(name='New Person 2')
  db.session.add_all([person1, person2]) 
  db.session.commit()
  
SQLAlchemy ORM in depth

  object relational mapping library 

  object life cycle, sessions, query object 

  Review using SQLAlchemy ORM in Python Interactive mode 

    from hello_flask_app import db, Person
    person = Person(name='Amy')
    db.session.add(person)
    db.session.all_all([person1, person2]) 
    db.session.commit()
    Person.query.first()
    person = Person.query.filter_by(name='Amy').first()
    person.name
    'Amy'

  Model.query
    SQLAlchemy query object
      object exists on a given model that we define in a SQLAlchemy application 
      query: source of all SELECT statements generated by the ORM 
        ability to get filtered slices of data
        Most common query methods on query object
          Person.query.filter_by(name='Amy')
          Person.query.all()
          Person.query.count()
          Person.query.filter(Person.name == 'Amy')
          Person.query.filter(Person.name == 'Amy', Team.name == 'Udacity)
          Person.query.get(1) # gets by primary key

        Bulk operations on data
          Product.query.filter_by(category='Misc').delete()
        
        Model.query method chaining 
          Person.query
            .filter(Person.name == 'Amy')
            .filter(Team.name == 'Udacity')
            .first()
  
          Driver.query
            .join('vehicles')
            .filter_by(driver_id=3)
            .all()
        
        Alternatives
          db.session.query(Person) same as Person.query
          session.query(Person).join(Team)

         Useful commands:
          Select records
            MyModel.query.all()
            MyModel.query.first()
          Filtering
            MyModel.query.filter_by(my_table_attribute='some value')
            MyModel.query.filter(MyOtherModel.some_attr='some value')
            OrderItem.query.filter(Product.id=3)
          Ordering
            MyModel.order_by(MyModel.created_at)
            MyModel.order_by(db.desc(MyModel.created_at)) # db.desc: to order in descending order 
          Limit
            Order.query.limit(100).all()
          Aggregates
            Task.query.filter(completed=True).count()
            MyModel.query.get(model_id) 
          Bulk Deletes
             Task.query.filter_by(category='Archived').delete()
          Joined Queries
            Driver.query.join('vehiciles')
          
          Query API: https://docs.sqlalchemy.org/en/14/orm/query.html   
          Person.query.first()
          Person.query.filter(MyOtherModel.some_attr='some value')
          MyModel.order_by(MyModel.created_at)
          MyModel.order_by(db.desc(MyModel.created_at))

            Ex OrderItem.query.filter(product.id=3)

SQLAlchemy Object Lifecycle
  start a connection
  start a session
  commit transactions
  close a connection
  session ends

  user = User(name='Amy') : Transient: Object exists, not associated with a Session

  INSERT 
  session.add(user1)
  session.add_all([user1, user2]) : Pending: Object associated with a session object. Can undo (rollback)

  DELETE
  session.delete(user1) : Object stays in a pending state until flush happens
  
  Flush: takes pending changes/translates them into SQL commands, ready to be committed to database

  On INSERTs, flush allows future primary key values to exist

  Not a commit. Nothing persisteted to database yet. 

  Stages
    1. Transient: object exists Ex user1 = User(name='Amy'), not attached to session yet
    2. Pending: object attached to session. Undo (db.session.rollback()) available. Waiting for flush. Ex. INSERT (session.add(user)), UPDATE(user.name = 'New name for Amy', DELETE (session.delete(user)) all in Pending state. NOTE: db.session.rollback() is in TRANSIENT State, but is *available* in Pending state. 
    3. Flushed: ready to be committed to db. Translate actions into SQL commands for engine
    4. Commited: manually called for a change to persist to database *permanently). Session's transactions cleared for new set of changes.

Object lifecycle flow
  1. Pending objects: adds pending changes to a transaction that db.session manages
    Ex.
       session.add(user) (INSERT)
       session.delete(user) (DELTE)
       user.name = 'new name' (UPDATE)
  2. Session flush:
     User.query.all(): "flushes" pending changes: translates to SQL commands
     
  3. Session commit: Persist to database. Session starts a new transaction. 

  Note: session.commit() will flush and commit. 

Summary:
  1. Flush takes pending changes, translates them to commands ready to be commit. Occurs when you call Query or db.session.commit()

  2. Commit: persisteed changes on the database. db.session the starts a new transaction.

**

Build a CRUD App with SQLAlchemy

**

CREATE, READ, UPDATE, DELETE(CRUD)

CREATE (CRUD): INSERT (SQL): db.session.add(user) (SQLAlchemy ORM)
READ: SELECT: User.query.all()
UPDATE: UPDATE: user.foo = 'new value'
DELETE: DELETE: db.session.delete(user)

Model View Controller, Migrations, Modeling relationshiops, Implementing Search

Create a TODO app

  flask offers render_template

  can pass in data to render_template

  Jinja: templating engine: embed non html inside html file.
    replaces template strings in html file with strings and renders html file to the user.
    Looks for index.html file in templates folder


  Set up Todo Flask app with home route

  Create Todo Class (table/data model)

  Create a todoapp Postgres database using createdb todoapp
    dropdb todoapp && createdb todoapp

  Connect SQLAlchemy ORM to Postgres database using app.config['SQLALCHEMY_DATABASE_URI']... 
  pip3 -m venv venv
  
  pip3 install -r requirements.txt

  note that SQLAlchemy no longer allows "postgres" in config.. must be "postg
  run psql to check database

    psql todoapp

    \dt: list out database tables should see todos table 
    INSERT INTO todos (description) VALUES ('Do a thing 1'); # create row data
      repeat 4 times
     
    select * from todos; # see the created rows

    FLASK_APP=app.py FLASK_DEBUG=true flask run 

    Should see list of Do a thing 1, Do a thing 2... 

 Model View Controller (MVC)
  Common pattern for architecting full stack applications

  3 layers

  Models: manage data and business logic
    what happens inside models and database (database)
  Views: display/representation logic (html)
  Controllers: routes commands to models and views. contains control logic. (API routes/endpoint urls)

 Updating: User input

 How to accept/get user data
 Send data in cotrollers
 Manipulate models
 Direct how view should update

Get user data in Flask 

  URL query parameters: /foo?field1=value1 use request.args
    value1 = request.args.get('field1')

  For form input, use request.form
  username = request.form.get('username')
  password = request.form.get('password')

  For data type application/json, use request.data
  data_string = request.data
  data_dictionary = json.loads(data_string)

  Summary
    3 methods of getting user data from view to controller
      1. URL query parameters
      2. Forms
      3. JSON 

  Use Forms
    <input type="text" value="foo2" id="bar1" name="bar2" class="bar3">

    request.form.get('bar2') # use 'name' to get the form input data in flask route

  POST submission
    on submit, HTTP POST request to the route /create with a request body

  GET submission
    GET request with URL query parameters that append form data to the url 
      request to /create?foo=bar

Use AJAX to send data to flask asynchronously

AJAX Requests
  
  XMLHttpRequest
    var xhttp = new XMLHttpRequest();
    description = document.getElementById("description").value;
    xhttp.open("GET", "/todos/create?description=" + description);
    xhttp.send();

    xhttp.onreadstatechange = function() {
      if (this.readyState === 4 && this.status == 200) {
        console.log(xhttp.responseText);
      }
    }

  Fetch
   fetch('/my/request', {
     method: 'POST',
     body: JSON.stringify({
       'description': 'some description here'}),
     headers: {
       'Content-Type': 'application/json'
     }
    }); 

use try except finally in route to handle errors

read/create data in views/controllers models

Next: change models over time, handle updates and deletes

**

Migrations

**

Schema migration 

Changing data schema 

Add a column called completed with data type boolean 

Changes to data schema 

Corrupt column, wrong variable names 

Quickly roll back changes to a valid state

Test changes before make them 

Test in development environment 

Schema migration: file that keeps track of changes to our database scheme (structure of our database)

  Think of as git commits 

  Version control of data schema

Summary:

  Migrations: manage modifications to data schema 

  Migration: a file tracks changes to database schema (structure of our database)
    
    version control 

  Upgrade (apply migrations) / roll back database schema 

Migrations: 
  
   stored as local files in app 

   migrations folder 

    add_tables_0001.py
    add_columns_to_todos_0002.py
    rename_column_to_todos_0003.py

Migrations applied or rolled back using command line scripts
  
    db migrate: create a migration script templates to fill out 

    db upgrade: apply unapplied migrations 

    db downgrade: roll back 

Flask Migrate: migration manager for micrating SQLAlchemy-based database changes

Flask Script:  run migrations scripts from terminal 

Data migrations: 

  INitialze the migration repository structure for storing migrations 

  Create a migration script (Flask Migrate)

  Run (manually) the migration script 

Migrations:
  1. encapsulate a set of changes to database scheme 
  2. uniquely named 
  3. stored as local files 
  4. 1-1 mapping between changes mad eto db and the migration files that exist in migrations/dolder

Steps for migration: 
1. Initialzie the migration repo strcuture for stoing migrations
2. Craeat migrattion script (flask-scipt)
3. Run migration script using Flask Script

Why use migrations? 

Without flask migrate\

Without flask migrate

  app.py: db.acreate(aol)


  ccmodls=es

  Flask Migrate: auto detects changes from old versions & new versions 

  If control over change examples


Summary: Autodetects: changes from old & new version of SQLAlchemy models

Creates migration script - resolves diffrence between old / new versions

Keep existing schema structures/keep using data 

Flask Migrate: add a completed column to todo model 

Alembic: used under the hood as part of flask-Migrate

Example of using flask-Migrate 
pip3 install flask-Migrate

initializing, upgrading, downgrading, generating migrations

Flask Migrate commands 

flask db init: create initial migrations directory structure 
  
   create a number of folders inside project directory 

   migrations folder, versions folder (stores all migrations scripts)   generate scripts to create/generate migrations

   alembic.ini
    config script: configure logging, file names 

flask db migrate: detects the model changes to be made and creates a migration file with upgrade and downgrade logic set up. 

dropdb todoapp: drop db first so that migration scripts can create initial set of schema Z 

flask db migrate: 
  detected nothing in db 
  searched through SQL alchemy models, detected table todos and added as migration in versions folder 

**can remove db.create_all() because flask db migrate will take care of that 

flask db upgrade: runs upgrade command in the migration file, to apply the migration 

flask db downgrade: runs the downgrade command in the migration file to rollback the migration 

flask db upgrade: applied the migration with the revision id 

  psql todoapp
  \dt : should see alembic_version (manages versions) and todos table \


make another change 

psql todos 

select * from todos;

Review how to set up and run migrations 

1. Bootstrap database migrate commands: link to Flask app models and database, link to command line scripts for running migrations, set up folders to store migrations (as versions of the database)
  
   migrate = Migrate(app, db): link app, db to command line scripts 

   flask db init # initialize 

2. Run initial migration 

  flask db migrate # run initial migration, do not use db.create_all

3. Migrate on changes to our data models 

  * Changes to SQLAlchemy models 
  * Allow Flask Migrate to auto generate a migration script based on the changes 
  * Fine tune the micration scripts
  * Run the migration: flask db upgrade

RECAP

Apply changes to schema using migrations allow to have version control over database schema. 

upgrades, downgrades (rollbacks) control version of database that we're using ensures against failures in database scheme 

Good idea to set up migrations at beginning of applications. 

Change application while preserving existing data and keeping application in a valid state. 

DELETE a todo item 

  Click x button to remove item in database

  Update view with that item removed from the list 

  Loop through items, send data to controller, know which item to delete, get the appropriate item and delete that object from database. Controller should notify view to refresh the page. Home page - fresh fetch to not include deleted items. 

SQLAlchemy ORM 

  todo = Todo.query.get(todo_id)

  db.session.delete(todo) 

  Todo.query.filter_by(id=todo_id).delete()

  db.session.commit()

SQL:
  DELETE FROM table_name
  WHERE condition;

In SQL Alchemy ORM:
  todo = Todo.query.get(todo_id)
  db.session.delete(todo)
  Todo.query.filter_by(id=todo_id).delete()
  db.session.commit()

**

Modeling Relationships

**

multiple models with relationship with one another

relationships between these models can determine if certain actions 
on one model should happen on other models 

when something happens to one model, related model objects should 
also be affected 

removing a user's account, should also remove all the user's photos, documents etc. 

Deleting a discussion thread should also delete all of it's comments

dactivate a profile should also deactivate all the host's listings 

model a relationship between todo list and todo items 

Collection of todo lists

Relationships and Joins 

Relationships in Relational Databases

Tables and rows across tables 

Example 

Between tables 

Use a foreign key 
Foreign key stored in "child" table 

A driver has many vehicles 
  
  vehicles                drivers
  id make driver_id       id name 
  1   a      3             1 Joe
  2   b      3             2 Mike
  3   c      2             3 Sam 

driver_id is the *foreign key* 

retrieves the primary key from the parent table 

child object belongs to a parent object through foreign key stored on child table 

Query: "What is the make, model, year of vehicles that driver Sarah has?"

SELECT make, model, year FROM vehicles
  JOIN drivers 
  ON vehiciles.driver_id = drivers.id
  WHERE drivers.name = 'Sarah';

SQL Joins 

inner join: 
  A and B 
  select first_name, last_name, order_date, order_amount
  from customers c
  inner join orders o
  on c.customer_id = o.customer_id

left join: 
  A
  select first_name, last_name, order_date, order_amount
  from customers c
  left join orders o
  on c.customer_id = o.customer_id
  view raw

right join: 
  B 
  select first_name, last_name, order_date, order_amount
  from customers c
  right join orders o
  on c.customer_id = o.customer_id
  
full join: 
  A or B
  select first_name, last_name, order_date, order_amount
  from customers c
  full join orders o
  on c.customer_id = o.customer_id
  http://www.sql-join.com/sql-join-typesa
  https://www.geeksforgeeks.org/sql-join-set-1-inner-left-right-and-full-joins/

db relationship
  provides and configures a mapped relationship between 2 models

Parent class SomeParent and Child class SomeChild
  
class SomeParent(db.Model):
  id = db.Column(db.Integer, primary_key=True)
  name = db.Column(db.String(50), nullable=False)
  children = db.relationship('SomeChild', backref='some_parent')
  
  SomeChild: name of the child class
  some_parent: property name of the parent object 

  child1 = SomeChild(name = 'Andrew')
  child1.some_parent : returns the parent object that child1 belongs to 

Summary:
  SQLAlchemy configures settings between model relationships once and generates JOIN statements

  db.relationship: interface to provide/configure a mapped relationship between two models 

  db.relationship defined on the parent model
    Sets the name of it's children Ex parent1.children
     name of parent on child using backref Ex. child1.my_parent
 https://flask-sqlalchemy.palletsprojects.com/en/2.x/quickstart/#simple-relationships
 https://docs.sqlalchemy.org/en/14/orm/relationship_api.html#sqlalchemy.orm.relationship

 When to load joined data (when to get child.some_parent) is important

  Lazy Loading: load needed joined data only as needed (default)
    Pro: no initial wait time 
    Con: join SQL call every time there is a request for a joined asset

  Eager loading: load all needed joined data objects all at once
    Pro: reduces further queries to the database  Eager loading: load all needed joined data objects all at once
      Pro: reduces further queries to the database - Subsequent calls read existing data 
      Con: loading joined table has long upfront initial load time  

children = db.relationship('ChildModel', backref='some_parent', lazy=True)

collection_class = list 
cascase = 'save-update' # OR: all, delete-orphan

driver_id REFERENCES drivers (id)
  ensures:
     driver_id maps to an id that belongs in the driver's table
     driver_id is nonempty

referential integrity is preserved 

Need to specifiy the foreign key on the child *explicityl*

db.relationship : defined on Parent Model

db.ForeignKey: defined on Child Model 

one-to-many relationship between todos and todolists 

https://database.guide/the-3-types-of-relationships-in-database-design/
