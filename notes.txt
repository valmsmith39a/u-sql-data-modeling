Python3
Flask
PostgreSQL
psycopg2: connect to Postgres server to a Flask application 
SQLAlchemy
Flask-SQLAlchemy

Database Management System
  Software to interact with a database

Database Application Programming Interfaces (DBAPIs)
  Interact with a database from another language/webserver framework

pyscopg2
  library to interact with database from Python

relational databases
  database: collection of data
  database system: storing/retrieving data 

properties of databases
  Persistence: access later 
  Shared source of truth: accessible by many usuers
  Store many data types 
  Concurrency control (handling many db actions at once)

relational vs nonrelational databases 
  
relational database 
  All data is stored in tables
  Every list of columns with data types per column
  Data intergrity: 
    Constraints 
    Triggers

Primary Keys (Composite key for multiple columns of primary keys)
  1 or more columns that uniquely identifies the whole row
  If more than 1 column

Foreign Key
  Maps 2 primary keys: encodes relationship from one table to another 

    Ex vehicles, drivers 
    id of drivers 
    have driver_id in anaother table's columns to link drivers and v    vehicles 

SQL: Structure Query Language
  Standard langage for communicating with a relational database 

  Different "dialects" 

SQL commands 
  Manipulating data
    Insert 
    Update
    Delete

  Querying data
    Select

  Structure data
    Create table
    Alter table
    Drop table

    Add column
    Drop column

Client Server model
  Request/Response 

Server: Postgres
Client: Command line applications/Graphical User Interfaces/Web apps

Database Server -[Web Server - Web Client]

Database - Server - Client 

Client - Server - Database 

Communication protocols used to transfer data over internet 

TCP/IP: Transmission Control Protocol / Internet Protocol 

Client/Server uses a communication protocol 

Postgres follows client-server model and supports TCP/IP for communication 


IP addresses: location of computers on a network 
Ports: describes where to receive traffic at recipient computer 

port 80: HTTP requests 
5432: most database ports - Default port for Postgres

TCP/IP: 
  connection-based protocol
  Open a connection to start communications 
  Close a connection to end communications 

TCP/IP suit of protocols

connections/sessions 

session: marks the start and end of a connection

session: 
start a connection - transactions are committed to the database- end a connection

UDP: User Datagram Protocol
  Hosts on the network send data (datagrams) without  any connections established

  fast/less reliable than TCP

  ex. real time streaming or Voice over IP use UDP

  fewer delays over UDP than TCP

TCP: 
  continuous connections - more reliable, more latency

server - database: 
  establish a connection to start a session 

Transactions: atomic units of work for database to perform 

Relational databases are *transactional*: All changes to data made through units called transactions 
  
  transaction: single/multiple changes 

    changes within data within a database: 
      UPDATE/INSERT/DELETE

    within a transaction multiple changes are executed in an *ordered* sequence that we dictate to transaction 

 operation - success/fails together as a unit 

Relational databases: All work captured in transactions 

Each transaction, work is done with UPDATE/INSERT/DELETE bundled as a whole 

ex

  transaction.add('INSERT INTO...')
  transaction.add('DELETE...')
  
  queue up work in a transaction 
  then *commit* the transaction

  transaction.commit() 

"queue" up the changes (UPDATE/INSERT/DELETE) and "commit" the 

 transaction can be cleared by using a rollback

 transaction.rollback()

Why bundle work into transactions? 
  Database systems can fail 
  Database always in a valid state

Summary:
` Queue up your INSERT/DELETE/UPDATE in a transaction and commit the transaction 

  If error, can rollback the transaction 

ACID Properties 

Review: 
  1. Databases use client-server model over a network 
  2. Postgres uses TCP/IP - a connection-based protocol

  3. Start/End session 

  4. Sessions have transactions that commit work to a database 

Maintain consistency in a database before/after a transaction, ACID properties followed 

A: Atomicity: Entire transaction takes place or not at all 

C: Consistency: Database must be consistent before / after a transaction 

I: Isolation: Multiple Transactions occur independently without interference 

D: Durability: Changes of a successful transaction occurs even if system failure occurs 

***Transactions: concern changing data in databaase INSERT/DELETE/UPDATE, not querying (no SELECT etc).

Changes are queued into the transaction and then commit the transaction 

Can rollback a transaction - cleared of commands

Rollback; clear the queue of operations added to a transacton 

Postgres: open source, general purpose, object-relational database management system 

  Object-relational support: includes support for arrays, inheritance

  highly scalable

  transaction-based

  multi-version concurrency control: avoids unnecessary locking when multiple writes are happening to the database at once - avoids wait times for access to database 

    several databases available for reading from and writing to at once 

  great performance / indexing capabilities for optimizing query performance 

 Postgres Terminal Commands 

login: sudo -u postgres -i 

start a server: pg_ctl -D /usr/local/var/postgres start

create a database: createdb <name>
delete a database: dropdb <name> 

psql: interact with a Postgres database 
  interactive terminal app 

  begin a connected session with that database

    psql <dbname>

   
psql commands 
  
  list databases: \l 

  quit: \q

  create a table within a database: create table <name>

  example: 

    create table table1(
      id INTEGER PRIMARY KEY
      description VARCHAR NOT NULL,
  );  

  see tables \dt

  see table schema for table: \d table1

  connect to a diffrent database \c <db name>

relation and table same thing 

  example of using psql 

    start connection to database 'example': psql example
    insert a row: INSERT INTO table1 (id, description) VALUES(1, 'this is a thing'); 
    query a row: SELECT * from table1; 
    query a row with a filter: SELECT * from table1 WHERE id = 1;  

psql: Postgres client to interact with Postgres database 

pgAdmin: GUI Postgres client to interact with PostgresSQL 

PopSQL: GUI Postgres client 

Postgres Adapters: psycopg2 = to make client Python apps 

DBAPISs:
  Provides a standard interface for one programming language to talk to relational database server 

  low level library for writing SQL statements that connevct to a database 

  also known as database adapters 

different DBAPIs for every server framework or language + database system 

  To connect Ruby on Rails app to Postgres server, user ruby-pg 

  To connect node application to Postgres sever, use node-postgres

  To connect Django/Flask application to a Postgres server: psycopg2

